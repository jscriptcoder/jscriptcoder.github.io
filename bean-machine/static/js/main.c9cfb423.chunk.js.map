{"version":3,"sources":["utils.ts","components/ControlPanel/ControlPanel.tsx","components/BeanBucket/BeanBucket.tsx","components/BeanMachine/BeanMachine.tsx","models/bucket.ts","models/machine.ts","models/ball.ts","App.tsx","index.tsx"],"names":["initArray","size","initItem","Array","keys","map","_","emitter","EventEmitter","ControlPanel","props","state","numBalls","defaultNumBalls","disabled","this","className","value","onChange","setState","type","onClick","emit","React","Component","BeanBucket","onEmpty","bucket","opened","balls","length","slice","model","capacity","height","style","borderBottom","BeanMachine","clicked","onEmptyBucket","buckets","i","key","totalBalls","Bucket","Machine","numBuckets","bouncingRows","ball","path","bucketIdx","reduce","acc","dir","push","pathTaken","Promise","all","a","rnd","Math","random","pLeft","dropInBucket","done","dropSingleBall","Ball","pRight","App","started","machines","onStarted","machine","dropAllBalls","forceUpdate","onReset","onOpenBucket","window","scrollTo","document","body","scrollHeight","on","offsetTop","ReactDOM","render","getElementById"],"mappings":"kTAEO,SAASA,EAAaC,EAAcC,GAEzC,OAAO,YAAIC,MAAMF,GAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAIJ,OAOnC,IAAMK,EAAU,I,OAAIC,G,kBCINC,G,kBAGnB,WAAYC,GAA2B,IAAD,8BACpC,4CAAMA,KACDC,MAAQ,CAAEC,SAAUF,EAAMG,iBAFK,E,sEAK5B,IAAD,OACCC,EAAaC,KAAKL,MAAlBI,SACAF,EAAaG,KAAKJ,MAAlBC,SACR,OACE,yBAAKI,UAAU,gBAAf,wBAGE,kBAAC,IAAD,CACEC,MAAOL,EACPE,SAAUA,EACVI,SAAU,SAAAN,GAAQ,OAAI,EAAKO,SAAS,CAAEP,gBACxC,kBAAC,IAAD,CACEQ,KAAK,UACLN,SAAUA,EACVO,QAAS,kBAAMd,EAAQe,KAAK,QAASV,KAHvC,SAIA,kBAAC,IAAD,CACEE,UAAWA,EACXO,QAAS,kBAAMd,EAAQe,KAAK,WAF9B,c,GAtBEC,IAAMC,YCCKC,G,0BAGnB,WAAYf,GAAyB,IAAD,8BAClC,4CAAMA,KAQRW,QAAU,WAAO,IACPK,EAAY,EAAKhB,MAAjBgB,QADM,EAEa,EAAKf,MAAxBgB,EAFM,EAENA,OAAQC,EAFF,EAEEA,OACVhB,EAAWe,EAAOE,MAAMC,OAE9B,IAAKF,GAAUhB,EAAW,EAAG,CAC3B,IAAMiB,EAAQF,EAAOE,MAAME,MAAM,GACjCJ,EAAOE,MAAMC,OAAS,EAEtB,EAAKX,SAAS,CAAEQ,SAAQC,QAAQ,IAEhCF,EAAQG,KAjBV,EAAKlB,MAAQ,CACXgB,OAAQjB,EAAMsB,MACdJ,QAAQ,GALwB,E,sEAwB1B,IACAK,EAAalB,KAAKL,MAAlBuB,SADD,EAEoBlB,KAAKJ,MAAxBgB,EAFD,EAECA,OAAQC,EAFT,EAESA,OACVM,EAA+B,IAAtBP,EAAOE,MAAMC,OAAeG,EAE3C,OACE,yBACEjB,UAAU,aACVmB,MAAO,CAAEC,aAAcR,EAAS,EAAI,QACpCP,QAASN,KAAKM,SACd,yBAAKL,UAAU,qBACZW,EAAOE,MAAMC,QAEhB,yBACEd,UAAU,kBACVmB,MAAO,CAAED,OAAO,GAAD,OAAKA,EAAL,a,GAzCfX,IAAMC,YCFKa,E,2MAGnB1B,MAAQ,CAAE2B,SAAS,G,EAEnBC,cAAgB,SAACV,GACf,EAAKV,SAAS,CAAEmB,SAAS,IACzB/B,EAAQe,KAAK,aAAcO,I,wEAGnB,IAAD,OACCG,EAAUjB,KAAKL,MAAfsB,MACAM,EAAYvB,KAAKJ,MAAjB2B,QAER,OACE,yBAAKtB,UAAU,eAEZsB,GAAW,yBAAKtB,UAAU,sBAE1BgB,EAAMQ,QAAQnC,KAAI,SAACsB,EAAQc,GAAT,OACjB,kBAAC,EAAD,CACEC,IAAKD,EACLT,MAAOL,EACPM,SAAUD,EAAMW,WAChBjB,QAAS,EAAKa,wB,GAvBhBhB,IAAMC,WCfKoB,E,sCACnBf,MAAgB,ICKGgB,E,WAKnB,aAAqC,IAAzBC,EAAwB,uDAAH,EAAG,yBAJpCN,aAIoC,OAHpCO,kBAGoC,OAFpCJ,gBAEoC,EAClC5B,KAAKyB,QAAUxC,EAAU8C,GAAY,kBAAM,IAAIF,KAC/C7B,KAAKgC,aAAehC,KAAKyB,QAAQV,OAAS,EAC1Cf,KAAK4B,WAAa,E,yDAGPK,EAAYC,GAGvB,IAAMC,EAAYD,EAAKE,QAAO,SAACC,EAAKC,GAElC,OADAD,GAAe,MAARC,EAAc,EAAI,IAExB,GAEHtC,KAAKyB,QAAQU,GAAWrB,MAAMyB,KAAKN,K,8EAGhBA,G,8EACbO,EAAkB,G,SAElBC,QAAQC,KL1BOxD,EK0BMc,KAAKgC,aLzB3B,YAAI5C,MAAMF,GAAMG,QAAQC,KAAI,SAAAoC,GAAC,OAAIA,MKyBQpC,IAA5B,uCAAgC,WAAMC,GAAN,eAAAoD,EAAA,sDAI1CC,EAAMC,KAAKC,SACjBN,EAAUD,KAAKN,EAAKc,MAAQH,EAAM,IAAM,KALQ,2CAAhC,wD,OAUlB5C,KAAKgD,aAAaf,EAAMO,G,iCLpCrB,IAAkBtD,I,+IKuCJ4B,G,mFACjBd,KAAK4B,WAAad,EAAMC,O,SAOlB0B,QAAQC,IAAI5B,EAAMxB,IAAN,uCAAU,WAAM2C,GAAN,eAAAU,EAAA,6DACpBM,EAAO,EAAKC,eAAejB,GADP,kBAInBgB,GAJmB,2CAAV,wD,8GCtDDE,EAInB,aAAkC,IAAtBJ,EAAqB,uDAAL,GAAK,yBAHjCA,WAGiC,OAFjCK,YAEiC,EAC/BpD,KAAK+C,MAAQA,EACb/C,KAAKoD,OAAS,EAAIL,GCaDM,E,2MACnBzD,MAAQ,CACN0D,SAAS,EACTC,SAAU,I,EASZC,U,uCAAY,WAAO3D,GAAP,mBAAA8C,EAAA,6DACFZ,EAAe,EAAKpC,MAApBoC,WAEF0B,EAAU,IAAI3B,EAAQC,GACtBjB,EAAQ7B,EAAUY,GAAU,kBAAM,IAAIsD,KAE5C,EAAK/C,SAAS,CACZkD,SAAS,EACTC,SAAU,CAACE,KARH,SAWJA,EAAQC,aAAa5C,GAXjB,OAaV,EAAK6C,cAbK,2C,wDAgBZC,QAAU,WACR,EAAKxD,SAAS,CACZkD,SAAS,EACTC,SAAU,M,EAIdM,a,uCAAe,WAAO/C,GAAP,iBAAA6B,EAAA,6DACLZ,EAAe,EAAKpC,MAApBoC,WACF0B,EAAU,IAAI3B,EAAQC,GAE5B,EAAK3B,SAAS,CAAEmD,SAAS,GAAD,mBAAM,EAAK3D,MAAM2D,UAAjB,CAA2BE,MAJtC,SAMPA,EAAQC,aAAa5C,GANd,OAQb,EAAK6C,cAGLG,OAAOC,SAAS,EAAEC,SAASC,KAAKC,cAXnB,2C,yIA5Bb1E,EAAQ2E,GAAG,QAASnE,KAAKwD,WACzBhE,EAAQ2E,GAAG,QAASnE,KAAK4D,SACzBpE,EAAQ2E,GAAG,aAAcnE,KAAK6D,gB,+BAwCtB,IAAD,EACuB7D,KAAKJ,MAA3B0D,EADD,EACCA,QAASC,EADV,EACUA,SAEjB,OACE,yBAAKtD,UAAU,OAEb,kBAAC,IAAD,CAAOmE,UAAW,IAChB,kBAAC,EAAD,CAActE,gBAAiB,IAAOC,SAAUuD,KAGlD,yBAAKrD,UAAU,iBACQ,IAApBsD,EAASxC,QAAgB,6CACzBwC,EAASxC,OAAS,GACjBwC,EAASjE,KAAI,SAACmE,EAAS/B,GAAV,OACX,kBAAC,EAAD,CACEC,IAAKD,EACLT,MAAOwC,a,GAjEUjD,IAAMC,WCbvC4D,IAASC,OAAO,kBAAC,EAAD,CAAKvC,WAAY,KAAQiC,SAASO,eAAe,U","file":"static/js/main.c9cfb423.chunk.js","sourcesContent":["import EventEmitter from 'events'\n\nexport function initArray<T>(size: number, initItem: () => T): T[] {\n  // just one way to do python `range()` in js\n  return [...Array(size).keys()].map(_ => initItem())\n}\n\nexport function getRange(size: number): number[] {\n  return [...Array(size).keys()].map(i => i)\n}\n\nexport const emitter = new EventEmitter()\n","import React from 'react'\nimport { InputNumber, Button } from 'antd'\n\nimport './ControlPanel.css'\nimport { emitter } from '../../utils'\n\ninterface ControlPanelProps {\n  defaultNumBalls: number\n  disabled: boolean\n}\n\ninterface ControlPanelState {\n  numBalls: number | undefined\n}\n\nexport default class ControlPanel\n  extends React.Component<ControlPanelProps, ControlPanelState> {\n\n  constructor(props: ControlPanelProps) {\n    super(props)\n    this.state = { numBalls: props.defaultNumBalls }\n  }\n\n  render() {\n    const { disabled } = this.props\n    const { numBalls } = this.state\n    return (\n      <div className=\"ControlPanel\">\n        Number of balls:\n        &nbsp;\n        <InputNumber\n          value={numBalls}\n          disabled={disabled}\n          onChange={numBalls => this.setState({ numBalls })} />\n        <Button\n          type=\"primary\"\n          disabled={disabled}\n          onClick={() => emitter.emit('start', numBalls)}>Start</Button>\n        <Button\n          disabled={!disabled}\n          onClick={() => emitter.emit('reset')}>Reset</Button>\n      </div>\n    )\n  }\n\n}\n","import React from 'react'\n\nimport './BeanBucket.css'\nimport Bucket from '../../models/bucket'\nimport Ball from '../../models/ball'\n\ninterface BeanBucketProps {\n  model: Bucket\n  capacity: number\n  onEmpty: (balls: Ball[]) => void\n}\n\ninterface BeanBucketState {\n  bucket: Bucket\n  opened: boolean\n}\n\nexport default class BeanBucket\n  extends React.Component<BeanBucketProps, BeanBucketState> {\n\n  constructor(props: BeanBucketProps) {\n    super(props)\n\n    this.state = {\n      bucket: props.model,\n      opened: false\n    }\n  }\n\n  onClick = () => {\n    const { onEmpty } = this.props\n    const { bucket, opened } = this.state\n    const numBalls = bucket.balls.length\n\n    if (!opened && numBalls > 0) {\n      const balls = bucket.balls.slice(0) // copy content\n      bucket.balls.length = 0 // empty the bucket\n\n      this.setState({ bucket, opened: true })\n\n      onEmpty(balls)\n    }\n  }\n\n  render() {\n    const { capacity } = this.props\n    const { bucket, opened } = this.state\n    const height = bucket.balls.length * 100 / capacity\n\n    return (\n      <div\n        className=\"BeanBucket\"\n        style={{ borderBottom: opened ? 0 : 'auto' }}\n        onClick={this.onClick}>\n        <div className=\"BeanBucket__balls\">\n          {bucket.balls.length}\n        </div>\n        <div\n          className=\"BeanBucket__bar\"\n          style={{ height: `${height}%` }} />\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport './BeanMachine.css'\nimport { emitter } from '../../utils'\nimport Machine from '../../models/machine'\nimport BeanBucket from '../BeanBucket'\nimport Ball from '../../models/ball'\n\ninterface BeanMachineProps {\n  model: Machine\n}\n\ninterface BeanMachineState {\n  clicked: boolean\n}\n\nexport default class BeanMachine\n  extends React.Component<BeanMachineProps, BeanMachineState> {\n\n  state = { clicked: false }\n\n  onEmptyBucket = (balls: Ball[]) => {\n    this.setState({ clicked: true })\n    emitter.emit('openbucket', balls)\n  }\n\n  render() {\n    const { model } = this.props\n    const { clicked } = this.state\n\n    return (\n      <div className=\"BeanMachine\">\n\n        {clicked && <div className=\"BeanMachine__mask\" />}\n\n        {model.buckets.map((bucket, i) => (\n          <BeanBucket\n            key={i}\n            model={bucket}\n            capacity={model.totalBalls}\n            onEmpty={this.onEmptyBucket} />\n        ))}\n\n      </div>\n    )\n  }\n}\n","import Ball from './ball'\n\nexport default class Bucket {\n  balls: Ball[] = []\n}\n","import Bucket from './bucket'\nimport Ball from './ball'\nimport { initArray, getRange } from '../utils'\n\n\ntype Dir = 'L' | 'R'\ntype Path = Dir[]\n\nexport default class Machine {\n  buckets: Bucket[]\n  bouncingRows: number\n  totalBalls: number\n\n  constructor(numBuckets: number = 2) {\n    this.buckets = initArray(numBuckets, () => new Bucket())\n    this.bouncingRows = this.buckets.length - 1\n    this.totalBalls = 0\n  }\n\n  dropInBucket(ball: Ball, path: Path) {\n    // Will drop the ball in the right bucket depending\n    // on the path taken\n    const bucketIdx = path.reduce((acc, dir) => {\n      acc += dir === 'L' ? 0 : 1\n      return acc\n    }, 0)\n\n    this.buckets[bucketIdx].balls.push(ball)\n  }\n\n  async dropSingleBall(ball: Ball): Promise<void> {\n    const pathTaken: Path = []\n\n    await Promise.all(getRange(this.bouncingRows).map(async _ => {\n      // Pseudo-random number in the range 0 to less than 1\n      // (inclusive of 0, but not 1) with approximately uniform\n      // distribution over that range\n      const rnd = Math.random()\n      pathTaken.push(ball.pLeft < rnd ? 'L' : 'R')\n      // We might want to add delay here between bounces\n      // await sleep()\n    }))\n\n    this.dropInBucket(ball, pathTaken)\n  }\n\n  async dropAllBalls(balls: Ball[]): Promise<void> {\n    this.totalBalls = balls.length\n\n    // We start dropping balls one by one...\n    // We make the whole process asynchronous since\n    // it might take some time for the all the ball to finish,\n    // plus time between balls. Even though all this is\n    // fictitious, we could definitely add those delays.\n    await Promise.all(balls.map(async ball => {\n      const done = this.dropSingleBall(ball)\n      // We might want to add delay here between balls\n      // await sleep()\n      return done\n    }))\n  }\n}\n","export default class Ball {\n  pLeft: number // Propability of bouncing left\n  pRight: number // Propability of bouncing right\n\n  constructor(pLeft: number = 0.5) {\n    this.pLeft = pLeft\n    this.pRight = 1 - pLeft\n  }\n}\n","import React from 'react'\nimport { Affix } from 'antd'\n\nimport './App.css'\nimport { emitter, initArray } from './utils'\nimport ControlPanel from './components/ControlPanel'\nimport BeanMachine from './components/BeanMachine'\nimport Machine from './models/machine'\nimport Ball from './models/ball'\n\ninterface AppProps {\n  numBuckets: number\n}\n\ninterface AppState {\n  started: boolean\n  machines: Machine[]\n}\n\nexport default class App extends React.Component<AppProps, AppState> {\n  state = {\n    started: false,\n    machines: []\n  }\n\n  componentDidMount() {\n    emitter.on('start', this.onStarted)\n    emitter.on('reset', this.onReset)\n    emitter.on('openbucket', this.onOpenBucket)\n  }\n\n  onStarted = async (numBalls: number) => {\n    const { numBuckets } = this.props\n\n    const machine = new Machine(numBuckets)\n    const balls = initArray(numBalls, () => new Ball())\n\n    this.setState({\n      started: true,\n      machines: [machine]\n    })\n\n    await machine.dropAllBalls(balls)\n\n    this.forceUpdate() // model changed. We need to re-render\n  }\n\n  onReset = () => {\n    this.setState({\n      started: false,\n      machines: []\n    })\n  }\n\n  onOpenBucket = async (balls: Ball[]) => {\n    const { numBuckets } = this.props\n    const machine = new Machine(numBuckets)\n\n    this.setState({ machines: [...this.state.machines, machine] })\n\n    await machine.dropAllBalls(balls)\n\n    this.forceUpdate() // model changed. We need to re-render\n\n    // Nasty scrolling\n    window.scrollTo(0,document.body.scrollHeight)\n  }\n\n  render() {\n    const { started, machines } = this.state\n\n    return (\n      <div className=\"App\">\n\n        <Affix offsetTop={16}>\n          <ControlPanel defaultNumBalls={10000} disabled={started} />\n        </Affix>\n\n        <div className=\"App__machines\">\n          {machines.length === 0 && <span>No Machines</span>}\n          {machines.length > 0 && (\n            machines.map((machine, i) => (\n              <BeanMachine\n                key={i}\n                model={machine} />\n            ))\n          )}\n        </div>\n\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App numBuckets={10} />, document.getElementById('root'))\n"],"sourceRoot":""}