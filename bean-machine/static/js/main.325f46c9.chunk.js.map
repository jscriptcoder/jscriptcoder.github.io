{"version":3,"sources":["utils.ts","components/ControlPanel/ControlPanel.tsx","components/BeanBucket/BeanBucket.tsx","components/BeanMachine/BeanMachine.tsx","models/bucket.ts","models/machine.ts","models/ball.ts","App.tsx","index.tsx"],"names":["initArray","size","initItem","Array","keys","map","_","emitter","EventEmitter","ControlPanel","props","onInputChange","numBalls","setState","onStartClick","state","emit","onResetClick","defaultNumBalls","disabled","this","className","value","onChange","type","onClick","React","Component","BeanBucket","onEmpty","bucket","opened","balls","length","slice","model","capacity","height","style","borderBottom","BeanMachine","bucketOpened","onEmptyBucket","disabledMask","buckets","i","key","totalBalls","Bucket","Machine","numBuckets","bouncingRows","ball","path","bucketIdx","reduce","acc","dir","push","pathTaken","Promise","all","a","rnd","Math","random","pLeft","dropInBucket","done","dropSingleBall","Ball","pRight","App","started","machines","onStarted","machine","dropAllBalls","forceUpdate","onReset","onOpenBucket","window","scrollTo","document","body","scrollHeight","on","runningMachines","offsetTop","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.325f46c9.chunk.js","sourcesContent":["import EventEmitter from 'events'\n\nexport function initArray<T>(size: number, initItem: () => T): T[] {\n  return [...Array(size).keys()].map(_ => initItem())\n}\n\nexport function getRange(size: number): number[] {\n  // just one way to do python `range()` in js\n  return [...Array(size).keys()].map(i => i)\n}\n\n// We're gonna use this emitter as our event bus\nexport const emitter = new EventEmitter()\n","import React from 'react'\nimport { InputNumber, Button } from 'antd'\n\nimport './ControlPanel.css'\nimport { emitter } from '../../utils'\n\ninterface ControlPanelProps {\n  defaultNumBalls: number\n  disabled: boolean\n}\n\ninterface ControlPanelState { numBalls: number | undefined }\n\nexport default class ControlPanel\n  extends React.Component<ControlPanelProps, ControlPanelState> {\n\n  constructor(props: ControlPanelProps) {\n    super(props)\n    this.state = { numBalls: props.defaultNumBalls }\n  }\n\n  onInputChange = (numBalls: number | undefined) => {\n    this.setState({ numBalls })\n  }\n\n  onStartClick = () => {\n    const { numBalls } = this.state\n    emitter.emit('start', numBalls)\n  }\n\n  onResetClick = () => {\n    emitter.emit('reset')\n  }\n\n  render() {\n    const { disabled } = this.props\n    const { numBalls } = this.state\n\n    return (\n      <div className=\"ControlPanel\">\n        Number of balls:\n        &nbsp;\n        <InputNumber\n          value={numBalls}\n          disabled={disabled}\n          onChange={this.onInputChange} />\n        <Button\n          type=\"primary\"\n          disabled={disabled}\n          onClick={this.onStartClick}>Start</Button>\n        <Button\n          disabled={!disabled}\n          onClick={this.onResetClick}>Reset</Button>\n      </div>\n    )\n  }\n\n}\n","import React from 'react'\n\nimport './BeanBucket.css'\nimport Bucket from '../../models/bucket'\nimport Ball from '../../models/ball'\n\ninterface BeanBucketProps {\n  model: Bucket\n  capacity: number\n  onEmpty: (balls: Ball[]) => void\n}\n\ninterface BeanBucketState {\n  bucket: Bucket\n  opened: boolean\n}\n\nexport default class BeanBucket\n  extends React.Component<BeanBucketProps, BeanBucketState> {\n\n  constructor(props: BeanBucketProps) {\n    super(props)\n\n    this.state = {\n      bucket: props.model,\n      opened: false\n    }\n  }\n\n  onClick = () => {\n    const { onEmpty } = this.props\n    const { bucket, opened } = this.state\n    const numBalls = bucket.balls.length\n\n    if (!opened && numBalls > 0) {\n      // Copy content. We're gonna drop these guys\n      // in another machine\n      const balls = bucket.balls.slice(0)\n\n      // ... emptying this bucket\n      bucket.balls.length = 0\n\n      this.setState({ bucket, opened: true })\n\n      onEmpty(balls)\n    }\n  }\n\n  render() {\n    const { capacity } = this.props\n    const { bucket, opened } = this.state\n    const height = bucket.balls.length * 100 / capacity\n\n    return (\n      <div\n        className=\"BeanBucket\"\n        style={{ borderBottom: opened ? 0 : 'auto' }}\n        onClick={this.onClick}>\n\n        <div className=\"BeanBucket__balls\">\n          {bucket.balls.length}\n        </div>\n\n        <div\n          className=\"BeanBucket__bar\"\n          style={{ height: `${height}%` }} />\n\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport './BeanMachine.css'\nimport { emitter } from '../../utils'\nimport Machine from '../../models/machine'\nimport BeanBucket from '../BeanBucket'\nimport Ball from '../../models/ball'\n\ninterface BeanMachineProps { model: Machine }\n\ninterface BeanMachineState { bucketOpened: boolean }\n\nexport default class BeanMachine\n  extends React.Component<BeanMachineProps, BeanMachineState> {\n\n  state = { bucketOpened: false }\n\n  onEmptyBucket = (balls: Ball[]) => {\n    this.setState({ bucketOpened: true })\n    emitter.emit('openbucket', balls)\n  }\n\n  render() {\n    const { model } = this.props\n    const { bucketOpened } = this.state\n\n    const disabledMask = bucketOpened\n      ? <div className=\"BeanMachine__mask\" />\n      : null\n\n    return (\n      <div className=\"BeanMachine\">\n\n        {disabledMask}\n\n        {model.buckets.map((bucket, i) => (\n          <BeanBucket\n            key={i}\n            model={bucket}\n            capacity={model.totalBalls}\n            onEmpty={this.onEmptyBucket} />\n        ))}\n\n      </div>\n    )\n  }\n}\n","import Ball from './ball'\n\nexport default class Bucket {\n  balls: Ball[] = []\n}\n","import Bucket from './bucket'\nimport Ball from './ball'\nimport { initArray, getRange } from '../utils'\n\n\ntype Dir = 'L' | 'R'\ntype Path = Dir[]\n\nexport default class Machine {\n  buckets: Bucket[]\n  bouncingRows: number\n  totalBalls: number\n\n  constructor(numBuckets: number = 2) {\n    this.buckets = initArray(numBuckets, () => new Bucket())\n    this.bouncingRows = this.buckets.length - 1\n    this.totalBalls = 0\n  }\n\n  dropInBucket(ball: Ball, path: Path) {\n    // Will drop the ball in the right bucket depending\n    // on the path taken\n    const bucketIdx = path.reduce((acc, dir) => {\n      acc += dir === 'L' ? 0 : 1\n      return acc\n    }, 0)\n\n    this.buckets[bucketIdx].balls.push(ball)\n  }\n\n  async dropSingleBall(ball: Ball): Promise<void> {\n    const pathTaken: Path = []\n\n    await Promise.all(getRange(this.bouncingRows).map(async _ => {\n      // Pseudo-random number in the range 0 to less than 1\n      // (inclusive of 0, but not 1) with approximately uniform\n      // distribution over that range\n      const rnd = Math.random()\n      pathTaken.push(ball.pLeft < rnd ? 'L' : 'R')\n      // We might want to add delay here between bounces\n      // await sleep()\n    }))\n\n    this.dropInBucket(ball, pathTaken)\n  }\n\n  async dropAllBalls(balls: Ball[]): Promise<void> {\n    this.totalBalls = balls.length\n\n    // We start dropping balls one by one...\n    // We make the whole process asynchronous since\n    // it might take some time for all the ball to finish,\n    // plus time between balls. Even though all this is\n    // fictitious, we could definitely add those delays.\n    await Promise.all(balls.map(async ball => {\n      const done = this.dropSingleBall(ball)\n      // We might want to add delay here between balls\n      // await sleep()\n      return done\n    }))\n  }\n}\n","export default class Ball {\n  pLeft: number // Propability of bouncing left\n  pRight: number // Propability of bouncing right\n\n  constructor(pLeft: number = 0.5) {\n    this.pLeft = pLeft\n    this.pRight = 1 - pLeft\n  }\n}\n","import React from 'react'\nimport { Affix } from 'antd'\n\nimport './App.css'\nimport { emitter, initArray } from './utils'\nimport ControlPanel from './components/ControlPanel'\nimport BeanMachine from './components/BeanMachine'\nimport Machine from './models/machine'\nimport Ball from './models/ball'\n\ninterface AppProps { numBuckets: number }\n\ninterface AppState {\n  started: boolean\n  machines: Machine[]\n}\n\nexport default class App\n  extends React.Component<AppProps, AppState> {\n\n  state = {\n    started: false,\n    machines: []\n  }\n\n  componentDidMount() {\n    emitter.on('start', this.onStarted)\n    emitter.on('reset', this.onReset)\n    emitter.on('openbucket', this.onOpenBucket)\n  }\n\n  onStarted = async (numBalls: number) => {\n    const { numBuckets } = this.props\n\n    const machine = new Machine(numBuckets)\n    const balls = initArray(numBalls, () => new Ball())\n\n    this.setState({\n      started: true,\n      machines: [machine]\n    })\n\n    await machine.dropAllBalls(balls)\n\n    // Model changed. We need to re-render.\n    // Definitely not the most efficient way to do it,\n    // but for this toy exercise is enough\n    this.forceUpdate()\n  }\n\n  onReset = () => {\n    this.setState({\n      started: false,\n      machines: []\n    })\n  }\n\n  // Triggers when we open a bucket,\n  // dropping the balls from the previous\n  // bucket through a new machine\n  onOpenBucket = async (balls: Ball[]) => {\n    const { numBuckets } = this.props\n    const machine = new Machine(numBuckets)\n\n    this.setState({ machines: [...this.state.machines, machine] })\n\n    await machine.dropAllBalls(balls)\n\n    this.forceUpdate() // model changed. We need to re-render\n\n    // Nasty scrolling, wild west like\n    window.scrollTo(0,document.body.scrollHeight)\n  }\n\n  render() {\n    const { started, machines } = this.state\n\n    const runningMachines = machines.length\n      ? (\n        machines.map((machine, i) => (\n          <BeanMachine\n            key={i}\n            model={machine} />\n        ))\n      )\n      : <h2>No Machines</h2>\n\n    return (\n      <div className=\"App\">\n\n        <Affix offsetTop={16}>\n          <ControlPanel\n            defaultNumBalls={10000}\n            disabled={started} />\n        </Affix>\n\n        <div className=\"App__machines\">\n          {runningMachines}\n        </div>\n\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <App numBuckets={10} />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}